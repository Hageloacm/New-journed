from fastapi import APIRouter, HTTPException, Depends
from ..database import admins_col
from ..schemas import LoginRequest
from ..utils.security import verify_password, create_access_token, hash_password
from ..config import OWNER_PHONE

router = APIRouter(prefix="/auth", tags=["auth"])

@router.post("/login")
async def login(payload: LoginRequest):
    admin = await admins_col.find_one({"phone": payload.phone})
    if not admin:
        raise HTTPException(status_code=401, detail="Credenciais inválidas")
    if not verify_password(payload.password, admin["hashed_password"]):
        raise HTTPException(status_code=401, detail="Credenciais inválidas")
    token = create_access_token(admin["phone"])
    return {"access_token": token}